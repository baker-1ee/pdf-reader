import { http, HttpResponse } from 'msw'

const mockPdfText = `추천의 글

항상 프로그램을 빠르고 정확하게 만드는 동료를 옆에서 지켜보며 떠올린 아이디어가 하나 있었다. "만일 지금 이 순간 모니터로 빨려 들어갈 듯한 저 친구의 머릿속으로 들어가서 어떤 일이 일어나고 있는지 살펴볼 수 있으면 얼마나 좋을까? 내가 프로그램을 작성할 때 드는 느낌과 생각은 다른 개발자와 같을까 다를까?" 이렇게 비기능으로 대표되는 소프트웨어의 여러 가지 속성을 맞추면서 어떻게 기능적으로 요구 사항에 맞춰 개발을 하는지 다른 사람의 시각으로 바라보면 좋겠다는 생각이 주기적으로 떠오르곤 했는데, 이번에 출간된 《프로그래머의 뇌》에서 궁금증을 어느 정도 해소할 수 있어 무척 반가웠다. 물론 사람의 두뇌란 무척 복잡하므로 현대 과학으로도 설명하기 어려운 부문이 분명히 존재하지만, 지레 복잡함에 겁먹고 포기하기보다는 현재까지 알려진 여러 지식을 총 동원해서 이해하려고 노력하는 자세가 무척 중요하다. 프로그램 작성 과정에서 우리는 인지적으로 걸리는 부하를 필연적으로 겪을 수밖에 없다. 이 책은 새로운 프로그래밍 언어와 라이브러리/프레임워크를 학습하거나, 처음부터 새롭게 코드를 작성하거나, 레거시 코드를 현대화하거나, 클린 코드를 위해 리팩터링을 하거나, 모놀리스를 마이크로서비스로 분해하는 등 각종 현실 상황에서 부딪힐 법한 문제점을 체계적으로 짚는다. 동시에 (바람직하게는) 이를 해소하거나, (해소까지는 못하더라도) 완화하는 방법에 대해 여러 가지 연구 결과를 바탕으로 정리했다. 이러한 점은 분명히 책의 매력 포인트이지만 이렇게 두뇌 구조만 설명하다 끝났다면 절반의 성공일 테고, 이론을 토대로 멋진 소프트웨어를 작성할 수 있어야 나머지 절반의 성공도 거둘 수 있을 것이다. 실제로 이 책은 문제 해결 방안과 수단으로서의 코드에 대해 설명한 다음에는 좋은 코드를 작성하기 위한 작명법, 코드 스멜을 감지하고 해소하는 방안, 문제 해결을 가속화하는 학습 방법까지 제시함으로써, 개발자들이 책에서 배운 내용을 즉시 현업에 적용할 수 있는 길을 열어준다.

제2장 소프트웨어 개발의 본질

소프트웨어 개발의 핵심은 문제 해결에 있다. 우리는 종종 기술적인 측면에만 집중하곤 하지만, 실제로는 비즈니스 문제를 해결하고 사용자의 요구를 충족시키는 것이 더 중요하다. 이는 단순히 코드를 작성하는 것 이상의 의미를 가진다. 개발자는 문제를 정확히 이해하고, 이를 해결하기 위한 최적의 방법을 찾아내야 한다.

2.1 개발자의 사고 과정
우리는 종종 다른 개발자들이 어떻게 생각하는지 궁금해한다. 특히 시니어 개발자들이 복잡한 문제를 해결할 때 어떤 사고 과정을 거치는지 알고 싶어 한다. 이들은 문제를 마주했을 때 즉각적으로 해결책을 떠올리는 것처럼 보이지만, 실제로는 수년간의 경험을 통해 축적된 패턴 인식이 작동하는 것이다.

제3장 효율적인 학습 방법

3.1 패턴 인식의 중요성
우리 두뇌는 패턴을 인식하고 기억하는 데 특화되어 있다. 개발자로서 성장한다는 것은 결국 더 많은 패턴을 습득하고 이를 적절히 활용하는 능력을 키우는 것이다. 코드를 읽을 때마다 새로운 패턴을 발견하고, 이를 자신의 것으로 만드는 과정이 필요하다.

3.2 실전 학습의 가치
실제 프로젝트에서 부딪히는 문제들은 교과서적인 예제와는 차이가 있다. 때로는 명확한 해답이 없는 상황에서 결정을 내려야 하며, 이런 경험들이 쌓여 진정한 성장이 이루어진다. 특히 레거시 코드를 다루는 경험은 매우 중요하다.

제4장 팀 협업과 코드 품질

4.1 코드 리뷰의 중요성
팀 프로젝트에서 코드 리뷰는 단순히 버그를 찾는 과정이 아니다. 이는 지식을 공유하고, 더 나은 해결책을 함께 모색하며, 팀의 코딩 표준을 확립하는 중요한 활동이다. 좋은 코드 리뷰는 비판이 아닌 협력의 과정이어야 한다.

제5장 지속 가능한 개발

5.1 기술 부채 관리
모든 프로젝트는 시간이 지남에 따라 기술 부채가 쌓인다. 중요한 것은 이를 적절히 관리하는 것이다. 때로는 빠른 출시를 위해 부채를 감수해야 할 때도 있지만, 이를 방치하면 프로젝트의 유지보수성이 급격히 저하될 수 있다.

5.2 리팩토링의 기술
코드 리팩토링은 예술이자 과학이다. 단순히 코드를 '깔끔하게' 만드는 것이 아니라, 시스템의 유연성과 확장성을 높이는 과정이다. 이는 마치 정원을 가꾸는 것과 같아서, 지속적인 관리와 노력이 필요하다.

제6장 미래를 위한 준비

6.1 새로운 기술의 습득
기술은 끊임없이 발전한다. 개발자로서 모든 새로운 기술을 다 따라갈 수는 없지만, 중요한 트렌드를 놓치지 않는 것이 중요하다. 특히 기본 원리에 대한 깊은 이해는 새로운 기술을 빠르게 습득하는 데 도움이 된다.

6.2 커리어 개발
개발자의 커리어는 단순히 기술적 성장만을 의미하지 않는다. 커뮤니케이션 능력, 프로젝트 관리 능력, 비즈니스 이해도 등 다양한 측면에서의 성장이 필요하다. 이는 시니어 개발자로 성장하는 데 필수적인 요소들이다.

결론

프로그래밍은 단순한 코딩 이상의 것이다. 이는 문제 해결의 예술이며, 끊임없는 학습과 성장의 여정이다. 우리는 더 나은 소프트웨어를 만들기 위해 기술적 역량뿐만 아니라, 사고방식과 접근 방법도 끊임없이 발전시켜야 한다. 이 책을 통해 그 여정의 첫걸음을 내딛기를 바란다.`

export const handlers = [
  http.post('/api/documents/extract', () => {
    return HttpResponse.json({ content: mockPdfText })
  })
]
